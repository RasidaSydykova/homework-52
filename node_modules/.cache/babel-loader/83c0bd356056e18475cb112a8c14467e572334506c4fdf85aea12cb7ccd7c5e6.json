{"ast":null,"code":"import Card from \"./Card\";\nclass CardDeck {\n  constructor() {\n    this.ranks = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A'];\n    this.suits = ['♦', '♥', '♣', '♠'];\n    this.deck = [];\n    this.suits.forEach(suit => {\n      this.ranks.forEach(rank => {\n        const card = new Card(rank, suit);\n        this.deck.push(card);\n      });\n    });\n  }\n  getCard() {\n    let array = [];\n    while (array.length < 5) {\n      let range = Math.floor(Math.random() * (36 - 5) + 5);\n      if (array.indexOf(range) === -1) array.push(range);\n      let unique = true;\n      for (let i = 5; i < 36; i++) {\n        if (range === array[i]) {\n          unique = false;\n        } else if (!unique) {\n          array.push(range);\n        }\n      }\n    }\n    return [card.array];\n  }\n  getCards(howMany) {\n    return [this.deck[10]];\n  }\n}\nexport default CardDeck;","map":{"version":3,"names":["Card","CardDeck","constructor","ranks","suits","deck","forEach","suit","rank","card","push","getCard","array","length","range","Math","floor","random","indexOf","unique","i","getCards","howMany"],"sources":["/Users/rasidataalaybekovna/Desktop/projects/homework-52/src/lib/CardDeck.ts"],"sourcesContent":["import Card from \"./Card\";\n\nclass CardDeck {\n  private readonly ranks = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A'];\n  private readonly suits = ['♦', '♥', '♣', '♠'];\n  public deck: Card[] = [];\n\n  constructor() {\n    this.suits.forEach(suit => {\n      this.ranks.forEach(rank => {\n        const card = new Card(rank, suit);\n        this.deck.push(card);\n      });\n    });\n  }\n\n  getCard(): Card[] {\n    let array = [];\n    while(array.length < 5) {\n      let range= Math.floor(Math.random() * (36 - 5) + 5);\n      if(array.indexOf(range) === -1) array.push(range);\n      let unique = true;\n      for(let i = 5; i < 36; i++) {\n        if(range === array[i]) {\n          unique = false;\n        } else if (!unique) {\n          array.push(range);\n        }\n      }\n    }\n    return [card.array];\n  }\n\n  getCards(howMany: number): Card[] {\n    return [this.deck[10]];\n  }\n}\n\n\n\n\n\n\n\n\nexport default CardDeck;"],"mappings":"AAAA,OAAOA,IAAI,MAAM,QAAQ;AAEzB,MAAMC,QAAQ,CAAC;EAKbC,WAAWA,CAAA,EAAG;IAAA,KAJGC,KAAK,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;IAAA,KAC1EC,KAAK,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;IAAA,KACtCC,IAAI,GAAW,EAAE;IAGtB,IAAI,CAACD,KAAK,CAACE,OAAO,CAACC,IAAI,IAAI;MACzB,IAAI,CAACJ,KAAK,CAACG,OAAO,CAACE,IAAI,IAAI;QACzB,MAAMC,IAAI,GAAG,IAAIT,IAAI,CAACQ,IAAI,EAAED,IAAI,CAAC;QACjC,IAAI,CAACF,IAAI,CAACK,IAAI,CAACD,IAAI,CAAC;MACtB,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EAEAE,OAAOA,CAAA,EAAW;IAChB,IAAIC,KAAK,GAAG,EAAE;IACd,OAAMA,KAAK,CAACC,MAAM,GAAG,CAAC,EAAE;MACtB,IAAIC,KAAK,GAAEC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;MACnD,IAAGL,KAAK,CAACM,OAAO,CAACJ,KAAK,CAAC,KAAK,CAAC,CAAC,EAAEF,KAAK,CAACF,IAAI,CAACI,KAAK,CAAC;MACjD,IAAIK,MAAM,GAAG,IAAI;MACjB,KAAI,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;QAC1B,IAAGN,KAAK,KAAKF,KAAK,CAACQ,CAAC,CAAC,EAAE;UACrBD,MAAM,GAAG,KAAK;QAChB,CAAC,MAAM,IAAI,CAACA,MAAM,EAAE;UAClBP,KAAK,CAACF,IAAI,CAACI,KAAK,CAAC;QACnB;MACF;IACF;IACA,OAAO,CAACL,IAAI,CAACG,KAAK,CAAC;EACrB;EAEAS,QAAQA,CAACC,OAAe,EAAU;IAChC,OAAO,CAAC,IAAI,CAACjB,IAAI,CAAC,EAAE,CAAC,CAAC;EACxB;AACF;AASA,eAAeJ,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}